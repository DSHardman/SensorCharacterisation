function [Y,Xf,Af] = ANN_lostcentre(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 18-Jun-2021 15:48:58.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx6 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx2 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-4.99999999999909;-42.0000000000002;-51.0000000000605;-8.99999999995487;-10.9999999999845;-7.99999999999136];
x1_step1.gain = [0.0689655172413826;0.00782778864970649;0.0240963855421475;0.0930232558141645;0.0754716981131719;0.0816326530613593];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.6416861254395354042;-0.94971957517276195393;34.69396944537572125;-0.94781836188230139673;1.437702137213922482;-4.3899545682051295259;-4.5049974181524232719;1.1083570893103693589;-34.690427569711992817;0.38568725290509325854];
IW1_1 = [0.21471374059628173248 0.7685596149703231017 -0.26932336158271569237 -2.3535380873759081943 7.8575237428731163902 -0.40204359312908982682;-0.32020773305058336522 1.0405737087127358009 -1.21955354635825719 10.889471531130441306 -3.2881670044173123557 -2.6962521616721684126;-0.090719049572513255075 51.039144699632167601 -0.41238559753030962218 -0.99380978965640542899 0.68016875584615399397 -0.23351033853008734686;0.19256923421311974987 -0.052492360708781958534 -1.2323386114993379881 1.0789851134911103703 4.033715297689738577 -1.5105717043918909237;4.0604125365872354436 -0.96759968762284642718 2.8255606105186168442 0.52872955237591001687 1.3581510354741446189 1.1507700207210009857;0.029227084573231146974 -0.37343830398491278943 20.562911984292114198 0.37895184526316005869 0.45125501365200310078 0.29841612431725211829;0.068251019984476496427 -0.32336094937803272487 22.018947825086403469 0.4498892545980185953 0.34952655298417090179 0.2920958740802822029;0.44953723743790846568 0.33525650703768616889 -0.56051349269345629445 -0.83138395906972040184 8.5286434975111831136 0.30998494453765801371;0.12142673300510618828 -51.187038636145196335 0.4755340515440719118 0.85381678946074401892 -0.6340783663692568517 0.18849369777204116883;0.61942469358486440534 0.54471887896311010913 -1.7832863103914196046 2.7506717588571039101 4.2356063245733999167 3.2901886887310420882];

% Layer 2
b2 = [0.29421073459959756757;0.50591783280025193203];
LW2_1 = [-0.073571879446960017357 0.041265149425108949011 3.4709872222135897957 -0.18771864134774929322 -0.23490006242350841559 5.6000127209331509448 -5.6923500628808065827 0.098035783825800512647 3.3406891352235223991 0.11864672175894989958;-1.0789081643406466249 0.30904851255342102867 1.3453350333136622208 0.54825879463965776495 -0.077159418217321237843 0.40929664186824860073 -0.39460614016640566115 0.97466698225989334414 1.3449350022480037747 -0.31298771350125514923];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0800227111322119;0.0800226083770493];
y1_step1.xoffset = [10.0002462740323;10.0001033766689];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
