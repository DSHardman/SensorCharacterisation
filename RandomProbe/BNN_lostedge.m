function [Y,Xf,Af] = BNN_lostedge(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 18-Jun-2021 15:45:28.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx6 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx2 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-7.55151818142394;-36.5683737393915;-40.5000000020176;-38.99999998436;-255.99999999996;-20.0000000033898];
x1_step1.gain = [0.1374427035857;0.0327039590367092;0.0373831775700104;0.0238095238099957;0.00379867046533774;0.0470588235383552];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.20376987988095521254;1.1766441748405913614;-5.2287376634283218024;-6.2929837342465511085;5.0477930088443603296;0.75665659423601017153;-0.033511416408694143232;0.051182304803433373297;-2.3831811724340687952;-0.69902927632690070592];
IW1_1 = [5.8103840747614805551 2.0657452991336588966 -3.1372320512102347401 -19.906221114596963417 -15.824808292929459341 4.340912303836492292;0.53571308303051090594 4.0037109536510993024 -4.8682149101612299802 -21.157238997851457896 -23.314093455096191576 -2.1948915654094305339;19.215460834092052522 3.0426350977727367741 1.9238618716340050163 -5.4393075693321186748 -11.261727556838453168 -5.5250395021873863755;1.5209766872420733552 2.2163139481154043864 8.6178109302493215438 -3.867386554751810035 -4.3015395783659675644 -0.82357093167641082232;-0.58367509259924277298 -0.85681546555281185018 -10.216747772797203808 11.814810780388919298 7.3114599908928914473 -3.8788656809715171825;-0.0071491246830948243854 9.2715413729652293995 -7.2865039875311996553 -7.9563437462382191612 -6.8897205225697284448 0.11670383493269476105;8.1123963350208700973 -8.5157039839104111678 2.0496087919872536531 -7.0227242468280515197 2.150708121240231474 10.820255976621496075;-8.1991693614840013282 5.2287186009437611744 -3.1599050245244098001 10.853433846624005454 9.400917424852359261 -0.25153479555983748739;-2.0116399238603568378 4.512156262521153316 0.75614968478820221431 6.1507346772974953453 -0.7095704423591213672 -8.2839814295320337578;-0.14733158598358811475 -9.196400050229755152 7.2857861405950163913 7.9645317336838115096 6.9245269813951928484 -0.10127671315090951143];

% Layer 2
b2 = [0.33800330708833997706;0.7046257677687413068];
LW2_1 = [0.24080923833073294982 -0.37416675577572783284 -0.1573924837181680525 0.69313221978133721102 0.48748046128163413648 2.123375463506108396 -0.34348567240676941559 -0.22394699258132583219 -0.29689369219859856885 1.9062111850712184502;-0.28878729628802085605 -0.06584196348133734833 0.10965117908079857756 0.27881084519068088934 -0.18592229104522750571 -11.787139527411278905 -0.12427267311579681675 0.35055855986946876657 -0.36115463285565729823 -11.893384814371144031];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0800528182123108;0.0800281525621334];
y1_step1.xoffset = [10.0045011160944;10.0016947056354];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
