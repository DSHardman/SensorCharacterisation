function [Y,Xf,Af] = BNN_lostcentre(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 18-Jun-2021 15:50:31.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx6 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx2 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-7.55151818142394;-36.5683737393915;-29.9999999982346;-38.99999998436;-255.99999999996;-144.813373249813];
x1_step1.gain = [0.1374427035857;0.0327039590367092;0.0439560439586687;0.0238095238099957;0.00379867046533774;0.00396972392205403];
x1_step1.ymin = -1;

% Layer 1
b1 = [-5.1782590219613657823;-4.7112295076671246719;0.52739092271891241381;-7.3843574846253892119;-9.1868640830590457824;-3.3273073104590387139;3.3919885764303909781;-0.2160206168941892213;11.23380331960314038;-7.4257286613361666028];
IW1_1 = [4.6306918969936825548 -1.3597147316287496732 -1.0224521197552489671 5.8475851032407621943 4.2208268512123972016 -8.8298081236156580331;0.0065084612122918317906 3.4205529843201607498 -4.7337771245489079774 -23.87580098113294369 -22.080778364125098534 -5.3717071303484074107;-6.9807652799531743071 -3.949882722548450964 6.8402754940465690936 9.9629944409623600876 9.3735816387493926527 3.7451560979884690461;0.092613416197631581728 -1.4430067986560619619 2.2108247528169044926 18.117369725916276479 16.39001041128478775 -20.302804017618964139;3.3893621118989871732 1.5212506833352767988 14.219992813149065825 -35.85798613868452378 9.2938011724640485767 0.75358864760000554561;13.036624754157804418 -2.1260914169924194361 13.323265791610081621 0.65773789994250364543 2.0158162017184864112 0.57007057885480894033;14.384936144988039075 -2.899649870721318301 -1.5533909550637328145 4.5896537730015536383 3.9061267577708855825 1.3870806569031446376;1.4865866583229225828 0.87331314737382426117 -0.80660027802880229775 0.41131656956965761962 -0.065480861165528161938 -0.45706596181966663295;1.2611505549506709656 -6.0464699174449121344 -26.097490993631446088 3.6527911240016144312 3.2790998146554204418 1.0649631526665317427;2.8154123011141316546 -18.7987609619929259 21.502114032272967137 -30.932560912554755816 -29.039855885045373185 -4.5635313968005073448];

% Layer 2
b2 = [0.34428233976512162551;0.54732801003707165499];
LW2_1 = [0.20220273302827163064 0.57487956788917815576 -0.074106960225188645008 0.34503191715431941189 0.19207020347992218023 -0.2533336386893528247 0.66495865550882626849 -0.29882256088858971665 -0.45651990509327555756 -0.26994938439540855368;-0.33484463238329631452 0.79534532882396935527 0.38564446391791129543 0.90620614830176116072 0.17531757669669878474 0.05331171845248651453 -0.35054267831063251615 0.89746576545352718668 0.24677194450485306909 0.18097689044399414837];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0800528182123108;0.0800281525621334];
y1_step1.xoffset = [10.0045011160944;10.0016947056354];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
