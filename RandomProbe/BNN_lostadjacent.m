function [Y,Xf,Af] = BNN_lostadjacent(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 18-Jun-2021 16:31:57.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx6 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx2 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-7.55151818142394;-36.5683737393915;-38.99999998436;-255.99999999996;-20.0000000033898;-144.813373249813];
x1_step1.gain = [0.1374427035857;0.0327039590367092;0.0238095238099957;0.00379867046533774;0.0470588235383552;0.00396972392205403];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.05118531994810116;1.3896345614059821827;-1.1209547501785546153;-2.6631649320165324824;-8.5038969499385625994;3.0757111848837981327;0.01869334852863737545;2.3766453007972212497;-1.6147535345642545224;2.9945893779436048021];
IW1_1 = [0.38222330424982225994 1.6644099854976270869 -14.236417763477094311 -13.28442637664902648 -0.68783961695931228331 6.1316094374172953607;1.9117151872147040148 0.29646005813382081406 9.4129047288166098895 2.270103209512033704 -7.8121951882217004481 3.336634407190527174;6.3215320344746057657 -1.5422223069389704442 -5.5318421558992625364 -4.637482620619924667 0.40341243127130788082 -0.94866117167050223458;-3.6395354056337136939 -18.519720348215280126 -6.0659380245989353853 -7.714196388413744998 -4.2665566475136218472 5.2124746545089415406;-1.3036512448795394281 -2.749891701867264171 -56.020338857203746841 -44.736832563411901731 -6.9298642900805926814 -6.3184116554577869351;-0.97187565653217855566 -2.844472584950255456 15.336536644947832642 14.78566501401242661 0.70520699531403951976 0.87162957893026749012;1.4406032739482956817 1.5085965045018987496 10.828806242274218619 3.1670415113863419343 -8.2630706576427961352 -0.70889623662864642561;28.13103643106504137 4.3416178584550078057 7.6255245620760545577 8.2178531250963526844 1.4726043545078864039 1.0712300066068436433;-9.1074643724919557286 2.7043443985383737171 14.449857042677843211 13.527735148486367933 0.89495701593832832632 -3.7198542528085627445;3.3306883381397249799 -0.07391983033585519669 44.195076729114717295 -205.26607481488332496 4.4740371015790021403 8.7192187044918352257];

% Layer 2
b2 = [-0.18248950850141859581;1.0287455322705447713];
LW2_1 = [-1.0851999754124022068 -0.72586184203788062241 -0.48066418451645498422 -0.11972257867064678427 0.44163338583199696075 -0.89034233902974679875 0.68681512766242636125 0.36733617990058042846 -0.32347800196581000254 0.1359074260392164335;-0.73705540266139402128 -0.7520101504023743999 0.42544182823650067427 0.33331540220533578678 -0.064771010600366024645 -0.92702842659179751639 0.88635658923903481998 -0.10327737558594279887 0.42637872519261177384 -0.2121492382047393821];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0800528182123108;0.0800281525621334];
y1_step1.xoffset = [10.0045011160944;10.0016947056354];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
