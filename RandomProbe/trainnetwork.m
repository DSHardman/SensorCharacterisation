function [meanerror,medianerror] = trainnetwork(presentsensors,x,t)
    % Solve an Input-Output Fitting problem with a Neural Network
    % Script generated by Neural Fitting app
    % Created 20-Jul-2021 19:01:01
    %
    % This script assumes these variables are defined:
    %
    %   Crelativefiltered - input data.
    %   CProbedPoints - target data.

    %x = Crelativefiltered';
    %t = CProbedPoints';
    
    x1 = zeros(length(presentsensors),size(x,1));
    
    for i = 1:length(presentsensors)
        x1(i,:) = x(:,presentsensors(i));
    end
    
    x = x1;
    t = t';

    % Choose a Training Function
    % For a list of all training functions type: help nntrain
    % 'trainlm' is usually fastest.
    % 'trainbr' takes longer but may be better for challenging problems.
    % 'trainscg' uses less memory. Suitable in low memory situations.
    trainFcn = 'trainlm';  % Levenberg-Marquardt backpropagation.

    % Create a Fitting Network
    hiddenLayerSize = 100;
    net = fitnet(hiddenLayerSize,trainFcn);

    % Setup Division of Data for Training, Validation, Testing
    net.divideParam.trainRatio = 70/100;
    net.divideParam.valRatio = 15/100;
    net.divideParam.testRatio = 15/100;

    % Train the Network
    [net,tr] = train(net,x,t);

    % Test the Network
    y = net(x);
    e = gsubtract(t,y);
    
    errormagnitude = zeros(size(x,2),1);
    for i = 1:size(x,2)
        errormagnitude(i) = sqrt((e(1,i))^2+(e(2,i))^2);
    end
    meanerror = mean(errormagnitude);
    medianerror = median(errormagnitude);
    
    %performance = perform(net,t,y)

    % View the Network
    %view(net)

    % Plots
    % Uncomment these lines to enable various plots.
    %figure, plotperform(tr)
    %figure, plottrainstate(tr)
    %figure, ploterrhist(e)
    %figure, plotregression(t,y)
    %figure, plotfit(net,x,t)
end

