function [Y,Xf,Af] = BNN_Default(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 18-Jun-2021 14:50:26.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx8 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx2 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-7.55151818142394;-36.5683737393915;-40.5000000020176;-29.9999999982346;-38.99999998436;-255.99999999996;-20.0000000033898;-144.813373249813];
x1_step1.gain = [0.1374427035857;0.0327039590367092;0.0373831775700104;0.0439560439586687;0.0238095238099957;0.00379867046533774;0.0470588235383552;0.00396972392205403];
x1_step1.ymin = -1;

% Layer 1
b1 = [-3.1017625555425798467;-2.4044255169378256909;-5.0687257927945550406;-0.013694477356781082147;-0.81160758521623910244;-0.11477353896362091357;-4.948033656373733713;6.7467725541984986393;5.1216570944011969857;0.074488878343734077347];
IW1_1 = [-4.7421941669681233478 -5.1254238911913860832 0.26272438485678345499 5.5912014661370932345 1.9288947219650067755 0.30521065800263236234 -2.4257380729016162491 -3.3999829872590026092;1.4203999995894251995 -0.96503968725146394014 2.044063855359970816 -0.18104454174103373765 9.069764228084640223 6.2032116041454044009 -2.3039111056302061797 -3.7958276656206915156;0.79428069290688207982 0.13931896576845487212 8.6496578256414995423 -10.107949134628794852 -10.467882730802486435 -10.871141196900563131 -0.45608723158467956438 -3.6388439200360047643;-0.1706091296331728735 9.1840861246440699261 -7.5889957951780324663 2.4702853073185302435 -3.3918330144263717507 -3.0122870001192816325 0.11092352797641553963 -1.5575835796332972993;0.56140700119162934012 -1.4470424672547719247 4.4341678921418452575 -0.74381412654616441138 13.845410233674678935 13.028284704759887092 0.84942997347245485784 1.7538685947509429219;0.38131428384109072871 -9.0118508627651916498 7.8303432711665568178 -3.3197165035419562429 3.5155020650809123417 3.2083200789391970176 0.016517043361347662211 2.0331935565173737679;4.1915595765089186386 -0.33506336348137444325 11.558302207637986214 3.7262013597474576976 1.0311246512075735726 7.2506314893878034411 7.6989738601222166281 1.2833952496860929759;-0.5641352050630027426 -0.26192465895570665735 4.0168324741026122382 -4.5635350485952397293 -9.3437722333376882489 -6.5131483675938950384 2.5661999374320982881 19.154200406961326308;28.334773525884095591 -4.0161162592265773341 -1.1482201209760083405 -2.4785459660999649145 -3.5887075567323005743 -1.9371178019110268931 0.63693297257214720464 1.3717645973057672748;-0.42619888081617346431 9.2560129544496021481 -8.5533198076375835939 4.5110460026378325082 -3.8748862346973598214 -3.6649886768179702479 -0.1596306121403599787 -2.9935677781707390466];

% Layer 2
b2 = [-0.16313523000147214792;1.1033969333911863853];
LW2_1 = [-0.16053345566539548028 -0.9215632726983502554 0.62582500651961048277 -3.5059103600154490898 0.7152298685420811486 -6.9486673300585506396 -0.31337062154791561763 -0.61530265359030422712 0.51924090932687883004 -3.5076999517348723678;0.26210298757695488225 -0.54587789403424979984 0.79994423518226454028 3.2297483389852055247 0.3696875293101286597 5.3136636056212260826 0.24668922950422331186 -0.79606422289105205348 -0.30953647733300865275 2.2205755243586962067];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0800528182123108;0.0800281525621334];
y1_step1.xoffset = [10.0045011160944;10.0016947056354];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
