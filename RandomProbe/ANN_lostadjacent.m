function [Y,Xf,Af] = ANN_lostadjacent(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 18-Jun-2021 16:30:51.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx6 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx2 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-4.99999999999909;-42.0000000000002;-8.99999999995487;-10.9999999999845;-7.99999999996135;-7.99999999999136];
x1_step1.gain = [0.0689655172413826;0.00782778864970649;0.0930232558141645;0.0754716981131719;0.0885110709979152;0.0816326530613593];
x1_step1.ymin = -1;

% Layer 1
b1 = [0.22443354250246894122;-3.0278440669781403471;-41.96539245803977991;0.43113633507599535832;0.77731721985921342633;-1.0151299670508469042;-0.59227516404235280856;-0.71529234091100102333;-43.721080343775767574;0.91192382843319919061];
IW1_1 = [3.3034112683348864081 -0.69577178692621488576 -0.82608271369696661957 -0.1753609577944835185 -0.0048738267288849319511 0.096344157510099739938;-1.5463783793797576394 -2.6046080891624261433 -0.39189805653295023413 1.2440401335127959648 1.8158997834809671446 1.0850124306948152331;-0.18586679258441032858 -61.439863640147812873 0.26749817641583489847 -0.47436726088077474373 -0.3676360814104676078 0.33434404131689754447;3.1416218732144520764 -0.4757683177605560032 -0.80300820979944576017 -0.25729183601215910304 -0.11584495431576659341 0.06009855275121962076;-0.1746650111300614705 0.56804517803780207874 1.0265053942733131098 0.021266756348593162523 -0.64327430731527790453 -0.89632967879879388295;-0.085427048420522705419 0.41615434255200578484 7.3824859559184625724 -1.4409464439350903042 -2.1455583432557761014 -1.3201719972279457593;-0.31267460995619861253 0.046830776345899952084 4.2540897847413701172 -6.7111894161622753785 -0.23923349607445734688 -0.41287936309954137437;-0.29088057575125203513 -0.0040385997648298187571 4.6632186949300917789 -6.9152136697908783702 -0.15414443704010827307 -0.19621388930360167402;-0.15870521356899683352 -63.907743285340622208 0.39304521572877315627 -0.48953561231186282221 -0.36007831038531651346 0.33533582711367215801;0.025520809434348479261 0.63213008039978546559 3.837074158696744508 -1.2898783621645273367 -1.5698525406684384897 4.5743354652126511084];

% Layer 2
b2 = [0.22411673733659867591;0.063246296116156841549];
LW2_1 = [5.023800151847147788 -0.61114611660793449754 7.9189237648547825543 -5.5418121852858082121 -1.3064033751540897743 0.22772359555079885185 -0.47410523992276987215 0.36255723454563448804 -8.0860497971702063325 -0.25429770703926651843;0.709305774160698288 -0.07087207946225630717 2.7732988804157368001 -0.76942504012642876088 0.55120866500730703041 0.44640728570886228921 -5.6496179649725473126 5.587577724716990879 -2.7528425857493243889 -0.34325472169817694557];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0800227111322119;0.0800226083770493];
y1_step1.xoffset = [10.0002462740323;10.0001033766689];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
