function [Y,Xf,Af] = ANN_Default(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 18-Jun-2021 14:47:56.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx8 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx2 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-4.99999999999909;-42.0000000000002;-38;-51.0000000000605;-8.99999999995487;-10.9999999999845;-7.99999999996135;-7.99999999999136];
x1_step1.gain = [0.0689655172413826;0.00782778864970649;0.0402588701678506;0.0240963855421475;0.0930232558141645;0.0754716981131719;0.0885110709979152;0.0816326530613593];
x1_step1.ymin = -1;

% Layer 1
b1 = [7.2795268732262297107;-4.002473001267891739;3.479883602692363187;-7.1079918867308728991;0.51510093987333482879;-0.74369913437746792972;-0.24811392418997132991;-2.4017824980922495293;4.5665647580710340137;22.79503138301318188];
IW1_1 = [-0.64661286067686252199 7.7065887974028912666 2.7277633964274925482 -22.136470629846858316 -0.58986025677382769583 0.37163315171988853258 0.51339188066136443034 -0.66178270151337958982;-0.97193484174743660642 -10.884035712125101014 -3.6726466560689501328 -0.1958593334807774422 0.66637281563431705056 0.82869984239698235573 0.50139411590914939598 0.45419397386976612108;-2.4650084828992016028 0.54137381336444345692 -2.1969025265346409093 -8.5245210342594290864 -0.22832456570461856504 -0.83445223149882397085 -0.34585890191763901669 -0.17046795482322699145;-0.66008032924641324435 -0.17743305926470767653 -5.2235313355262436019 37.560006117434113548 -0.8661554190890883298 0.43195002010715388696 0.45684018968051715026 -0.36851950097301316989;-0.068874355585377314282 0.38252369411949088684 -0.0055503747133323344531 0.095260271606364993469 -4.0178511122403843814 5.4180649225902115518 0.44091685339745828598 -0.35527139524066186915;-0.053141637194487903462 0.0051256015563309045499 -0.37604324324273175062 -0.93816482443267179558 2.8218558396621307161 -0.45900388920067525245 -1.6499931411631545419 -4.9725898908731824832;0.057216682289923964655 -0.28345769215792310236 0.027739931172188772579 -0.052698738222860523617 3.4790604257751387429 -5.2217265579569378531 -0.54402476921209841354 0.39725791664930276692;-0.60234281237740783244 0.37940003270062672147 -1.4993539086553286932 1.9726623234402655971 -2.0120244050270947866 -0.90129710291247944198 -0.97724011692201895318 -2.6409704640960001143;3.791425481363369876 0.43804421281747718542 -6.3812584062677304431 3.9169144057168683304 -1.6375012082907804967 1.171238440846529727 -0.7497379773844398132 -0.50907656848283877604;-0.41856861184488497463 2.001641759528771658 -22.489224841029795243 2.0883836869349963195 1.9103813530206752436 0.67667829995574491075 0.66103769701674786052 21.24803136357662936];

% Layer 2
b2 = [0.12678200668993894196;-0.53905504580840968298];
LW2_1 = [0.73905362598756341175 0.59020667450293162748 -0.26650071082860099514 0.57824691770980607419 0.51251600143865772008 0.011680590431466238849 0.49105756831507579863 0.044497781216984028108 -0.20915894389446695878 0.010947627571150390577;0.043136547155906229678 0.048117261068691484505 -0.049322454011959344922 0.035646721166770520273 -3.0579498273080956139 0.42313740023419438296 -3.1477184412340228903 -0.64267558649669920268 -0.037697158845472741873 0.38113527378371553356];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0800227111322119;0.0800226083770493];
y1_step1.xoffset = [10.0002462740323;10.0001033766689];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
